# -*- coding: utf-8 -*-
"""[TW] Market Pulse Automation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/xxxxxxxxxxx

#條件設定 ＋ 安裝套件
"""

# 條件設定1：時間設定
import time
from datetime import datetime, timedelta
import datetime

# 大前天 
two_day_before_yesterday = datetime.date.today() + timedelta(days=-3)
two_day_before_yesterday =  str(two_day_before_yesterday.strftime("%Y-%m-%d"))

# 前天 
one_day_before_yesterday = datetime.date.today() + timedelta(days=-2)
one_day_before_yesterday =  str(one_day_before_yesterday.strftime("%Y-%m-%d"))

# 昨天
yesterday = datetime.date.today() + timedelta(days=-1)
yesterday =  str(yesterday.strftime("%Y-%m-%d"))

# 今天
today = str(time.strftime("%Y-%m-%d", time.localtime()))

# 時間設定 (e.g. 如果要算昨天的訂單，請在from_created_at 設定 yesterday， to_created_at 設定 today)
from_created_at = '2021-07-22'                # <-- 開始時間：  可在等號後輸入實際日期（格式‘yyyy-mm-dd’，範例'2020-08-05'），或若為大前天，請在等號右邊輸入 two_day_before_yesterday (不用加單引號)； 前天，one_day_before_yesterday； 昨天，yesterday； 今天，today (都不用加單引號)
to_created_at = '2021-07-23'                  # <-- 結束時間：  可在等號後輸入實際日期（格式‘yyyy-mm-dd’，範例'2020-08-06'），或若為大前天，請在等號右邊輸入 two_day_before_yesterday (不用加單引號)； 前天，one_day_before_yesterday； 昨天，yesterday； 今天，today (都不用加單引號)

# 條件設定2：登入設定
Admin_User_Email = str('xxxxxxx')
Admin_User_Password = str('xxxxxxxx')

# 每日表格連結
daily_topline_pulse_gsheet_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxx/edit#gid=xxxxxxxx'                # <-- 請修改這裡的連結(要加單引號)，每天的topline pulse表格
daily_acquisition_pulse_gsheet_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxxxx/edit#gid=xxxxxxxxxx'    # <-- 請修改這裡的連結(要加單引號)，每天的acquisition pulse表格
daily_retention_pulse_gsheet_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxxxxx/edit#gid=xxxxxxxx'     # <-- 請修改這裡的連結(要加單引號)，每天的retention pulse表格

# 總表連結  (for 2021)
topline_master_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxxx/edit#gid=xxxxxxx'
acquisition_master_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxx/edit#gid=xxxxxxxx'
retention_master_link = 'https://docs.google.com/spreadsheets/d/xxxxxxxxxxx/edit#gid=xxxxxxx'

# 安裝相關套件

#install chromium, its driver, selenium and other packages:
#!apt install chromium-chromedriver
#!cp /usr/lib/chromium-browser/chromedriver /usr/bin
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

!pip install google-auth
!pip install selenium
!pip install requests
!pip install bs4
!pip install lxml
!pip install --upgrade -q gspread
!pip install gspread
!pip install gspread_dataframe

# 條件設定3：讓程式可以擁有雲端硬碟權限，跑出連結後，請點入驗證，並將驗證碼貼於下方空格中

# Give google drive access
import os                                                                       # Mount the drive from Google to save the dataset
from google.colab import drive                                                  # this will be our driver
drive.mount('/gdrive')
root = '/gdrive/My Drive/'

# 條件設定4：讓程式可以擁有雲端表單權限，跑出連結後，請點入驗證，並將驗證碼貼於下方空格中

# Give google cloud access
from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

"""#(1) Daily Topline/Acquisition/Retention Pulse "Raw" Update """

# selenium - set options to be headless
from selenium import webdriver
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('-headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
d = webdriver.Chrome(chrome_options=chrome_options)
d.get('xxxxxxxx')                  # Insert Target Site

d.find_element_by_id("admin_user_email").send_keys(Admin_User_Email)            # Admin User Email
d.find_element_by_id("admin_user_password").send_keys(Admin_User_Password)      # Admin User Password
d.find_element_by_id("admin_user_submit_action").click()

d.find_element_by_name("q[created_at_gteq]").send_keys(from_created_at)         # from created_at
d.find_element_by_name("q[created_at_lteq]").send_keys(to_created_at)           # to created_at
d.find_element_by_name("commit").click()

from selenium.webdriver import ActionChains
d.find_element_by_xpath("//*[@id='index_footer']/div[2]/a[1]").click()

# download table
time.sleep(10) 

import pandas as pd 
download_table = pd.read_csv('/content/order-requests-' + time.strftime("%Y-%m-%d", time.localtime()) + '.csv')

# format the table
topline_raw_table = download_table[['Id','Vehicle','Driver','Driver phone number','Driver nickname','Driver license plate','客人名稱','電話號碼','Phone number completed ratio','Organization','Branch','User','Client platform','Pickup Time','Status','Created at','Updated at','Duration','Price','Driver price','Customer price','Bonus','Calculated vat','Price excl vat','Extra fee incl vat','Extra fee excl vat','Coin price','Coupon code','Subsidy','Waypoints','Notes','Remark','Referring driver','Client UDID','Resolved at','Order created at','Payment Method','Email name','Email company','Company name','Email address','Postal address','Remark for admin']]
acquisition_retention_raw_table = download_table[['Id','Vehicle','Driver','Driver phone number','Driver nickname','Driver license plate','客人名稱','電話號碼','Phone number completed ratio','Organization','Branch','User','Client platform','Pickup Time','Status','Created at','Updated at','Duration','Price','Driver price','Customer price','Bonus','Calculated vat','Price excl vat','Extra fee incl vat','Extra fee excl vat','Coin price','Coupon code','Subsidy','Waypoints','Notes','Remark','Referring driver','Client UDID','Resolved at','Order created at','Payment Method','Email name','Email company','Email address','Postal address','Remark for admin']]

# Auto Update to GSheet
import pandas as pd
from gspread_dataframe import set_with_dataframe


wb = gc.open_by_url(daily_topline_pulse_gsheet_link)
sheet = wb.worksheet('raw')
ddf = pd.DataFrame(columns = ['Id','Vehicle','Driver','Driver phone number','Driver nickname','Driver license plate','客人名稱','電話號碼','Phone number completed ratio','Organization','Branch','User','Client platform','Pickup Time','Status','Created at','Updated at','Duration','Price','Driver price','Customer price','Bonus','Calculated vat','Price excl vat','Extra fee incl vat','Extra fee excl vat','Coin price','Coupon code','Subsidy','Waypoints','Notes','Remark','Referring driver','Client UDID','Resolved at','Order created at','Payment Method','Email name','Email company','Company name','Email address','Postal address','Remark for admin'])
for i in range(0,1000):
  Id = ' '
  ddf = ddf.append(pd.DataFrame({'Id':[Id],'Vehicle':[Id],'Driver':[Id],'Driver phone number':[Id],'Driver nickname':[Id],'Driver license plate':[Id],'客人名稱':[Id],'電話號碼':[Id],'Phone number completed ratio':[Id],'Organization':[Id],'Branch':[Id],'User':[Id],'Client platform':[Id],'Pickup Time':[Id],'Status':[Id],'Created at':[Id],'Updated at':[Id],'Duration':[Id],'Price':[Id],'Driver price':[Id],'Customer price':[Id],'Bonus':[Id],'Calculated vat':[Id],'Price excl vat':[Id],'Extra fee incl vat':[Id],'Extra fee excl vat':[Id],'Coin price':[Id],'Coupon code':[Id],'Subsidy':[Id],'Waypoints':[Id],'Notes':[Id],'Remark':[Id],'Referring driver':[Id],'Client UDID':[Id],'Resolved at':[Id],'Order created at':[Id],'Payment Method':[Id],'Email name':[Id],'Email company':[Id],'Company name':[Id],'Email address':[Id],'Postal address':[Id],'Remark for admin':[Id]}),ignore_index=True)
set_with_dataframe(sheet, ddf)
set_with_dataframe(sheet, topline_raw_table)


wb2 = gc.open_by_url(daily_acquisition_pulse_gsheet_link)
sheet = wb2.worksheet('raw')
dddf = pd.DataFrame(columns = ['Id','Vehicle','Driver','Driver phone number','Driver nickname','Driver license plate','客人名稱','電話號碼','Phone number completed ratio','Organization','Branch','User','Client platform','Pickup Time','Status','Created at','Updated at','Duration','Price','Driver price','Customer price','Bonus','Calculated vat','Price excl vat','Extra fee incl vat','Extra fee excl vat','Coin price','Coupon code','Subsidy','Waypoints','Notes','Remark','Referring driver','Client UDID','Resolved at','Order created at','Payment Method','Email name','Email company','Email address','Postal address','Remark for admin'])
for i in range(0,1000):
  Id = ' '
  dddf = dddf.append(pd.DataFrame({'Id':[Id],'Vehicle':[Id],'Driver':[Id],'Driver phone number':[Id],'Driver nickname':[Id],'Driver license plate':[Id],'客人名稱':[Id],'電話號碼':[Id],'Phone number completed ratio':[Id],'Organization':[Id],'Branch':[Id],'User':[Id],'Client platform':[Id],'Pickup Time':[Id],'Status':[Id],'Created at':[Id],'Updated at':[Id],'Duration':[Id],'Price':[Id],'Driver price':[Id],'Customer price':[Id],'Bonus':[Id],'Calculated vat':[Id],'Price excl vat':[Id],'Extra fee incl vat':[Id],'Extra fee excl vat':[Id],'Coin price':[Id],'Coupon code':[Id],'Subsidy':[Id],'Waypoints':[Id],'Notes':[Id],'Remark':[Id],'Referring driver':[Id],'Client UDID':[Id],'Resolved at':[Id],'Order created at':[Id],'Payment Method':[Id],'Email name':[Id],'Email company':[Id],'Email address':[Id],'Postal address':[Id],'Remark for admin':[Id]}),ignore_index=True)
set_with_dataframe(sheet, dddf)
set_with_dataframe(sheet, acquisition_retention_raw_table)


wb3 = gc.open_by_url(daily_retention_pulse_gsheet_link)
sheet = wb3.worksheet('raw')
set_with_dataframe(sheet, dddf)
set_with_dataframe(sheet, acquisition_retention_raw_table)

"""#(2) Pulse Master Update"""

# Delay for 30 seconds.
time.sleep(30)

# Daily Acquisition Pulse --> Acquistion Master 

wb2 = gc.open_by_url(daily_acquisition_pulse_gsheet_link)
sheet = wb2.worksheet('Order (#)')
rows = sheet.get_all_values()

import pandas as pd
cell_df1 = pd.DataFrame(rows[3])
acquisition_cell_df1 = pd.DataFrame.transpose(cell_df1)
acquisition_df1 = acquisition_cell_df1.drop(labels=[0,1,2,3,4,5],axis=1)

cell_df2 = pd.DataFrame(rows[10])
acquisition_cell_df2 = pd.DataFrame.transpose(cell_df2)
acquisition_df2 = acquisition_cell_df2.drop(labels=[0,1,2,3,4,5],axis=1)

acquisition_df = pd.concat([acquisition_df1,acquisition_df2],axis = 1)
acquisition_df.columns = ['ADHOC_motor新用戶請求訂單 (#)','ADHOC_motor新用戶完成訂單 (#)','ADHOC_motor所有請求訂單 (#)','ADHOC_motor新用戶請求訂單比例 (%)','ADHOC_motor新用戶完成率 (%)','ADHOC_mtruck新用戶請求訂單 (#)','ADHOC_mtruck新用戶完成訂單 (#)','ADHOC_mtruck所有請求訂單 (#)','ADHOC_mtruck新用戶請求訂單比例 (%)','ADHOC_mtruck新用戶完成率 (%)','ADHOC_van新用戶請求訂單 (#)','ADHOC_van新用戶完成訂單 (#)','ADHOC_van所有請求訂單 (#)','ADHOC_van新用戶請求訂單比例 (%)','ADHOC_van新用戶完成率 (%)','ADHOC_struck新用戶請求訂單 (#)','ADHOC_struck新用戶完成訂單 (#)','ADHOC_struck所有請求訂單 (#)','ADHOC_struck新用戶請求訂單比例 (%)','ADHOC_struck新用戶完成率 (%)', \
                          'ODP_motor新用戶請求訂單 (#)','ODP_motor新用戶完成訂單 (#)','ODP_motor所有請求訂單 (#)','ODP_motor新用戶請求訂單比例 (%)','ODP_motor新用戶完成率 (%)','ODP_mtruck新用戶請求訂單 (#)','ODP_mtruck新用戶完成訂單 (#)','ODP_mtruck所有請求訂單 (#)','ODP_mtruck新用戶請求訂單比例 (%)','ODP_mtruck新用戶完成率 (%)','ODP_van新用戶請求訂單 (#)','ODP_van新用戶完成訂單 (#)','ODP_van所有請求訂單 (#)','ODP_van新用戶請求訂單比例 (%)','ODP_van新用戶完成率 (%)','ODP_struck新用戶請求訂單 (#)','ODP_struck新用戶完成訂單 (#)','ODP_struck所有請求訂單 (#)','ODP_struck新用戶請求訂單比例 (%)','ODP_struck新用戶完成率 (%)'] 

# update to master
from gspread_dataframe import set_with_dataframe
mwb2 = gc.open_by_url(acquisition_master_link)
sheet = mwb2.worksheet('auto_updated_field')
set_with_dataframe(sheet, acquisition_df)

# Daily Retention Pulse --> Retention Master 

# tab1
wb3 = gc.open_by_url(daily_retention_pulse_gsheet_link)
sheet = wb3.worksheet('Order (#) & GMV ($)')
rows = sheet.get_all_values()

import pandas as pd
cell_df1 = pd.DataFrame(rows[7])
retention_cell_df1 = pd.DataFrame.transpose(cell_df1)
retention_df1 = retention_cell_df1.drop(labels=[0,1,4,5,6,7,8,11,12,13,14,15,18,19,20,21,22,25,26,27,28,29],axis=1)

cell_df2 = pd.DataFrame(rows[16])
retention_cell_df2 = pd.DataFrame.transpose(cell_df2)
retention_df2 = retention_cell_df2.drop(labels=[0,1,4,5,6,7,8,11,12,13,14,15,18,19,20,21,22,25,26,27,28,29],axis=1)

retention_df = pd.concat([retention_df1,retention_df2],axis = 1)
retention_df.columns = ['ADHOC_motor舊用戶','ADHOC_motor舊用戶訂單','ADHOC_mtruck舊用戶','ADHOC_mtruck舊用戶訂單','ADHOC_van舊用戶','ADHOC_van舊用戶訂單','ADHOC_struck舊用戶','ADHOC_struck舊用戶訂單',
                        'ODP_motor舊用戶','ODP_motor舊用戶訂單','ODP_mtruck舊用戶','ODP_mtruck舊用戶訂單','ODP_van舊用戶','ODP_van舊用戶訂單','ODP_struck舊用戶','ODP_struck舊用戶訂單'] 

# update to master
from gspread_dataframe import set_with_dataframe
mwb3 = gc.open_by_url(retention_master_link)
sheet = mwb3.worksheet('auto_updated_field')
set_with_dataframe(sheet, retention_df)

# Daily Topline Pulse --> Topline Master 

# tab1
wb = gc.open_by_url(daily_topline_pulse_gsheet_link)
sheet = wb.worksheet('Order (#) & GMV ($)')
rows = sheet.get_all_values()

import pandas as pd
cell_df1 = pd.DataFrame(rows[6])
topline_cell_df1 = pd.DataFrame.transpose(cell_df1)
topline_df1 = topline_cell_df1.drop(labels=[0,1,4,5,6,7,10,11,12,13,16,17,18,19,22,23,24,25],axis=1)

cell_df2 = pd.DataFrame(rows[20])
topline_cell_df2 = pd.DataFrame.transpose(cell_df2)
topline_df2 = topline_cell_df2.drop(labels=[0,1,4,5,6,7,10,11,12,13,16,17,18,19,22,23,24,25],axis=1)

cell_df3 = pd.DataFrame(rows[33])
topline_cell_df3 = pd.DataFrame.transpose(cell_df3)
topline_df3 = topline_cell_df3.drop(labels=[0,1,2,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,25],axis=1)

cell_df4 = pd.DataFrame(rows[12])
topline_cell_df4 = pd.DataFrame.transpose(cell_df4)
topline_df4 = topline_cell_df4.drop(labels=[0,1,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,23,24,25],axis=1)

cell_df5 = pd.DataFrame(rows[26])
topline_cell_df5 = pd.DataFrame.transpose(cell_df5)
topline_df5 = topline_cell_df5.drop(labels=[0,1,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,23,24,25],axis=1)

topline_df = pd.concat([topline_df1,topline_df2,topline_df3,topline_df4,topline_df5],axis = 1)


# tab2
wb = gc.open_by_url(daily_topline_pulse_gsheet_link)
sheet = wb.worksheet('TXG Order (#) & GMV ($)')
rows = sheet.get_all_values()

import pandas as pd
cell_df1 = pd.DataFrame(rows[6])
topline_cell_df1 = pd.DataFrame.transpose(cell_df1)
ttopline_df1 = topline_cell_df1.drop(labels=[0,1,4,5,6,7,10,11,12,13,16,17,18,19,22,23,24,25],axis=1)

cell_df2 = pd.DataFrame(rows[20])
topline_cell_df2 = pd.DataFrame.transpose(cell_df2)
ttopline_df2 = topline_cell_df2.drop(labels=[0,1,4,5,6,7,10,11,12,13,16,17,18,19,22,23,24,25],axis=1)

cell_df3 = pd.DataFrame(rows[33])
topline_cell_df3 = pd.DataFrame.transpose(cell_df3)
ttopline_df3 = topline_cell_df3.drop(labels=[0,1,2,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,25],axis=1)

cell_df4 = pd.DataFrame(rows[12])
topline_cell_df4 = pd.DataFrame.transpose(cell_df4)
ttopline_df4 = topline_cell_df4.drop(labels=[0,1,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,23,24,25],axis=1)

cell_df5 = pd.DataFrame(rows[26])
topline_cell_df5 = pd.DataFrame.transpose(cell_df5)
ttopline_df5 = topline_cell_df5.drop(labels=[0,1,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,21,22,23,24,25],axis=1)

ttopline_df = pd.concat([ttopline_df1,ttopline_df2,ttopline_df3,ttopline_df4,ttopline_df5],axis = 1)

topline_df = pd.concat([topline_df,ttopline_df],axis = 0)
topline_df.columns = ['ADHOC_motor請求訂單(#)','ADHOC_motor完成訂單 (#)','ADHOC_mtruck請求訂單(#)','ADHOC_mtruck完成訂單 (#)','ADHOC_van請求訂單(#)','ADHOC_van完成訂單 (#)','ADHOC_struck請求訂單(#)','ADHOC_struck完成訂單 (#)',
                      'ODP_motor請求訂單(#)','ODP_motor完成訂單 (#)','ODP_mtruck請求訂單(#)','ODP_mtruck完成訂單 (#)','ODP_van請求訂單(#)','ODP_van完成訂單 (#)','ODP_struck請求訂單(#)','ODP_struck完成訂單 (#)',
                      'HR_motor完成訂單 (#)','HR_mtruck完成訂單 (#)','HR_van完成訂單 (#)','HR_struck完成訂單 (#)',
                      'ADHOC_motor新用戶 (#)','ADHOC_mtruck新用戶 (#)','ADHOC_van新用戶 (#)','ADHOC_struck新用戶 (#)',
                      'ODP_motor新用戶 (#)','ODP_mtruck新用戶 (#)','ODP_van新用戶 (#)','ODP_struck新用戶 (#)'] 


# update to master
from gspread_dataframe import set_with_dataframe
mwb2 = gc.open_by_url(topline_master_link)
sheet = mwb2.worksheet('auto_updated_field')
set_with_dataframe(sheet, topline_df)

